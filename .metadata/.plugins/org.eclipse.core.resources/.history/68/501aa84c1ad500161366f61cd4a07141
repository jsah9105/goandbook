/**
 * 
 */
package com.sagarmatha.dao;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.apache.log4j.Logger;
import org.hibernate.HibernateException;
import org.hibernate.Session;

import com.sagarmatha.bean.AppointFix;
import com.sagarmatha.bean.Appointment;
import com.sagarmatha.bean.SellerAccount;
import com.sagarmatha.bean.Service;
import com.sagarmatha.bean.ServiceOrder;
import com.sagarmatha.util.HibernateUtil;

/**
 * @author jitendra
 *
 */

public class AppointmentService {
	private static final Logger logger = Logger.getLogger(AppointmentService.class);
	
	public Long getdetailInfo(AppointFix appointFix){
		logger.debug("Entering to addBussiness method");
		Session session = HibernateUtil.getSessionFactory().openSession();
		Appointment businessAppointment = new Appointment();
		Long appointmentID = null;
		try {
			session.beginTransaction();
			businessAppointment.setAppointId(appointFix.getCustomerId());
			businessAppointment.setServiceId(appointFix.getServiceId());
			businessAppointment.setDate(appointFix.getDate());
			businessAppointment.setStartTime(appointFix.getStartTime());
			appointmentID = (Long) session.save(businessAppointment);
			session.getTransaction().commit();
			session.flush();
		} catch (HibernateException e) {
			if (session.getTransaction() != null)
				session.getTransaction().rollback();
			e.printStackTrace();
		} finally {
			
			session.close();
		}

		logger.debug("Exit from addBussiness where addressID = "+appointmentID);
		
		
		return appointmentID;
		
	}
	
	public SellerAccount getBusinessDetail(Long businessId){
		logger.debug("Entering to getBusineesName");
		// Session session = HibernateUtil.getSession();
		Session session = HibernateUtil.getSessionFactory().openSession();
		SellerAccount businessIdList = new SellerAccount();
		Service service = new Service();
		List<ServiceOrder> serviceIdList = new ArrayList<ServiceOrder>();
		List<Service> serviceDetailList = new ArrayList<Service>();

		try {
			session.beginTransaction();
			List list = session.createQuery("select b.businessName, b.phone1, b.phone2, b.email, o.address1, o.address2, o.city, o.state, o.zipCode, o.country from Address INNER JOIN Business b where o.businessId=:businessId")
					.setLong("businessId", businessId).list();

			Iterator iterator = list.iterator();
			while (iterator.hasNext()) {

				businessIdList =  (SellerAccount) iterator.next();

			}
			
			List listserviceId = session.createQuery("select e.serviceId from ServiceOrder e  where e.businessId=:businessId")
					.setLong("businessId", businessId).list();

			Iterator iteratorServiceId = listserviceId.iterator();
			while (iteratorServiceId.hasNext()) {

				serviceIdList =  (List<ServiceOrder>) iteratorServiceId.next();

			}
			
			for (int i = 0; i < serviceIdList.size(); i++) {
				List listservicedetail = session.createQuery("from Service e  where e.serviceId=:serviceId")
						.setLong("serviceId", serviceIdList.get(i).getServiceId()).list();

				Iterator iteratorServiceDetail = listservicedetail.iterator();
				while (iteratorServiceDetail.hasNext()) {

					service =  (Service) iteratorServiceDetail.next();

				}
				serviceDetailList.add(service);
				
			}
			businessIdList.setServiceList(serviceDetailList);
			
		} catch (HibernateException e) {
			if (session.getTransaction() != null)
				session.getTransaction().rollback();
			logger.error("Business ID Not found");
			e.printStackTrace();
		} finally {
			session.flush();
			session.close();
		}
		return  businessIdList;
		
	}
}
